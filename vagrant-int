# -*- mode: ruby -*-
# vi: set ft=ruby :
require_relative 'vagrant/utils.rb'

# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
VAGRANTFILE_API_VERSION = "2"


Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|

    config.vm.define "int" do |int|
        # Every Vagrant virtual environment requires a box to build off of.
        int.vm.box = "precise32"
        # int.vm.box = "centos7"

        # The url from where the 'int.vm.box' box will be fetched if it
        # doesn't already exist on the user's system.
        int.vm.box_url = "http://files.vagrantup.com/precise32.box"
        # int.vm.box_url = "https://f0fff3908f081cb6461b407be80daf97f07ac418.googledrive.com/host/0BwtuV7VyVTSkUG1PM3pCeDJ4dVE/centos7.box"

        int.vm.network "forwarded_port", guest: 5432, host: 5432
        int.vm.network "forwarded_port", guest: 80, host: 8000
        int.vm.network :private_network, ip: "192.168.56.121"
        # int.ssh.forward_agent = true

        # we still mount apps from hosts
        apps = get_clone_apps()
        apps.each do |app_name, host_app_path|
            int.vm.synced_folder host_app_path, "/srv/app-clones/#{app_name}", :mount_options => ['dmode=755', 'fmode=666']
        end

        deploy_apps = get_deploy_apps()
        undeploy_apps = get_undeploy_apps()

        # set name of VM
        int.vm.provider "virtualbox" do |v|
          v.name = "django_async_integration"
        end

        int.vm.provision "ansible" do |ansible|
            ansible.playbook = "provision.yml"
            ansible.inventory_path = "inventories/integration_servers"
            ansible.limit = 'all'
            ansible.verbose = 'vv'

            if !deploy_apps.nil?
                # if there is an app to deploy use deploy playbook
                ansible.playbook = "deploy.yml"
                ansible.extra_vars = {deploy_apps: deploy_apps}
            end

            if !undeploy_apps.nil?
                # if there is an app to deploy use deploy playbook
                ansible.playbook = "deploy.yml"
                ansible.extra_vars = {undeploy_apps: undeploy_apps}
            end
        end

        # int.vm.hostname = "www.testing.de"
        # int.hostsupdater.aliases = ["int.django-async.local"]

        aliases = ["buildbot.local"]

        if !deploy_apps.nil?
            aliases.concat(deploy_apps.map { |app| app["dns"] })
        end

        int.hostsupdater.aliases = aliases

    end
end
